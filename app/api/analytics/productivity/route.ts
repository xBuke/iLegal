import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { db } from '@/lib/db';

export async function GET(request: NextRequest) {
  try {
    const session = await auth();
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const user = await db.user.findUnique({
      where: { id: session.user.id },
      include: { organization: true },
    });

    if (!user?.organization) {
      return NextResponse.json({ error: 'Organization not found' }, { status: 404 });
    }

    const organizationId = user.organization.id;

    // Get current month start date
    const now = new Date();
    const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);

    // Get all users in the organization
    const users = await db.user.findMany({
      where: { organizationId },
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
      },
    });

    const productivityData = await Promise.all(
      users.map(async (user) => {
        try {
          // Get cases completed by this user in current month
          const casesCompleted = await db.case.count({
            where: {
              client: { organizationId },
              assignedToId: user.id,
              status: 'CLOSED',
              updatedAt: { gte: currentMonthStart },
            },
          });

          // Get billable hours for this user in current month
          const billableHours = await db.timeEntry.aggregate({
            where: {
              userId: user.id,
              isBillable: true,
              date: { gte: currentMonthStart },
            },
            _sum: { duration: true },
          });

          // Get revenue generated by this user in current month
          const revenue = await db.invoice.aggregate({
            where: {
              client: { organizationId },
              // Note: This is a simplified calculation
              // In a real system, you'd need to track which user generated which revenue
              issueDate: { gte: currentMonthStart },
              status: 'PAID',
            },
            _sum: { total: true },
          });

          const totalBillableHours = (billableHours._sum.duration || 0) / 60; // Convert minutes to hours
          const userRevenue = (revenue._sum.total || 0) / users.length; // Distribute revenue equally for demo

          return {
            user: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,
            casesCompleted,
            billableHours: Math.round(totalBillableHours),
            revenue: userRevenue,
          };
        } catch (error) {
          console.error(`Error fetching productivity data for user ${user.id}:`, error);
          return {
            user: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,
            casesCompleted: 0,
            billableHours: 0,
            revenue: 0,
          };
        }
      })
    );

    // Sort by cases completed descending
    productivityData.sort((a, b) => b.casesCompleted - a.casesCompleted);

    return NextResponse.json(productivityData);
  } catch (error) {
    console.error('Error fetching productivity data:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
