// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// ORGANIZATION & USERS
// ============================================

model Organization {
  id                String   @id @default(cuid())
  name              String
  email             String?
  phone             String?
  address           String?
  taxId             String?  // OIB in Croatia
  logo              String?
  
  // Subscription (using String instead of enum for SQLite)
  subscriptionTier  String @default("BASIC") // BASIC, PRO, ENTERPRISE
  subscriptionStatus String @default("TRIAL") // TRIAL, ACTIVE, PAST_DUE, CANCELLED
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  trialEndsAt       DateTime?
  subscriptionEndsAt DateTime?
  
  // Storage limits
  storageUsed       BigInt   @default(0) // in bytes
  storageLimit      BigInt   @default(53687091200) // 50GB in bytes
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  users             User[]
  clients           Client[]
  cases             Case[]
  documents         Document[]
  invoices          Invoice[]
  timeEntries       TimeEntry[]
  expenses          Expense[]
  auditLogs         AuditLog[]
  apiKeys           ApiKey[]
  
  @@index([stripeCustomerId])
  @@map("organizations")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String   // Hashed password
  firstName         String?
  lastName          String?
  avatar            String?
  role              String   @default("LAWYER") // ADMIN, LAWYER, PARALEGAL, ACCOUNTANT, VIEWER
  
  // Billing settings
  hourlyRate        Float?
  currency          String   @default("EUR")
  
  // Status
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  emailVerified     DateTime?
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  timeEntries       TimeEntry[]
  casesAssigned     Case[]
  notes             Note[]
  tasks             Task[]
  auditLogs         AuditLog[]
  sessions          Session[]
  
  @@index([organizationId])
  @@map("users")
}

// NextAuth Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("sessions")
}

// ============================================
// CLIENTS
// ============================================

model Client {
  id                String   @id @default(cuid())
  
  // Type: INDIVIDUAL or COMPANY
  clientType        String @default("INDIVIDUAL")
  
  // Individual fields
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  personalId        String?  // OIB for individuals
  
  // Company fields
  companyName       String?
  registrationNumber String?
  taxId             String?  // OIB for companies
  
  // Contact
  email             String?
  phone             String?
  mobile            String?
  address           String?
  city              String?
  postalCode        String?
  country           String   @default("Croatia")
  
  // Additional info
  notes             String?
  status            String @default("ACTIVE") // ACTIVE, INACTIVE, POTENTIAL
  
  // Portal access
  portalAccessEnabled Boolean @default(false)
  portalInviteSentAt DateTime?
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete
  
  // Relations
  cases             Case[]
  invoices          Invoice[]
  documents         Document[]
  
  @@index([organizationId])
  @@index([email])
  @@map("clients")
}

// ============================================
// CASES
// ============================================

model Case {
  id                String   @id @default(cuid())
  caseNumber        String   // Auto-generated or custom
  title             String
  description       String?
  
  // Case details
  caseType          String   // e.g., "Civil", "Criminal", "Corporate"
  status            String @default("OPEN") // OPEN, IN_PROGRESS, ON_HOLD, CLOSED_WON, etc.
  priority          String @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  
  // Court information
  courtName         String?
  courtCaseNumber   String?
  judge             String?
  opposingCounsel   String?
  
  // Dates
  openedAt          DateTime @default(now())
  closedAt          DateTime?
  nextHearingDate   DateTime?
  statuteOfLimitations DateTime?
  
  // Financial
  estimatedValue    Float?
  contingencyFee    Float? // percentage
  
  clientId          String
  client            Client   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  
  assignedToId      String?
  assignedTo        User?    @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete
  
  // Relations
  documents         Document[]
  timeEntries       TimeEntry[]
  expenses          Expense[]
  tasks             Task[]
  notes             Note[]
  
  @@unique([organizationId, caseNumber])
  @@index([organizationId])
  @@index([clientId])
  @@index([status])
  @@map("cases")
}

// ============================================
// DOCUMENTS
// ============================================

model Document {
  id                String   @id @default(cuid())
  fileName          String
  originalName      String
  fileSize          Int
  mimeType          String
  fileUrl           String   // Vercel Blob or S3 URL
  
  // Encryption
  encryptionIv      String?  // Initialization vector for AES
  isEncrypted       Boolean  @default(true)
  
  // Metadata
  title             String?
  description       String?
  category          String?
  tags              String?  // Comma-separated tags
  
  // Version control
  version           Int      @default(1)
  parentDocumentId  String?
  parentDocument    Document? @relation("DocumentVersions", fields: [parentDocumentId], references: [id], onDelete: SetNull)
  versions          Document[] @relation("DocumentVersions")
  
  // AI Analysis (PRO/ENTERPRISE) - stored as JSON strings
  analysisStatus    String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  analyzedAt        DateTime?
  extractedText     String?
  summary           String?
  entities          String?  // JSON string of extracted entities
  keyPhrases        String?  // JSON string of important clauses
  riskScore         Float?   // 0-100 risk assessment
  
  // Associations
  caseId            String?
  case              Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull)
  
  clientId          String?
  client            Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  uploadedById      String
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete
  
  @@index([organizationId])
  @@index([caseId])
  @@index([clientId])
  @@map("documents")
}

// ============================================
// TIME TRACKING & BILLING
// ============================================

model TimeEntry {
  id                String   @id @default(cuid())
  
  date              DateTime @default(now())
  duration          Int      // in minutes
  description       String
  
  // Billing
  hourlyRate        Float
  amount            Float
  isBillable        Boolean  @default(true)
  isBilled          Boolean  @default(false)
  
  caseId            String?
  case              Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull)
  
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  invoiceId         String?
  invoice           Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organizationId])
  @@index([caseId])
  @@index([userId])
  @@index([date])
  @@map("time_entries")
}

model Expense {
  id                String   @id @default(cuid())
  
  date              DateTime @default(now())
  description       String
  category          String   // e.g., "Court Fees", "Travel", "Filing"
  amount            Float
  
  // Receipt
  receiptUrl        String?
  
  isBillable        Boolean  @default(true)
  isBilled          Boolean  @default(false)
  
  caseId            String?
  case              Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull)
  
  invoiceId         String?
  invoice           Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organizationId])
  @@index([caseId])
  @@map("expenses")
}

model Invoice {
  id                String   @id @default(cuid())
  invoiceNumber     String
  
  // Status: DRAFT, SENT, PAID, OVERDUE, CANCELLED
  status            String @default("DRAFT")
  
  // Dates
  issueDate         DateTime @default(now())
  dueDate           DateTime
  paidDate          DateTime?
  
  // Amounts
  subtotal          Float
  taxRate           Float  @default(25.00) // Croatian PDV
  taxAmount         Float
  total             Float
  amountPaid        Float  @default(0)
  
  // Notes
  notes             String?
  terms             String?
  
  // PDF
  pdfUrl            String?
  
  clientId          String
  client            Client   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  timeEntries       TimeEntry[]
  expenses          Expense[]
  
  @@unique([organizationId, invoiceNumber])
  @@index([organizationId])
  @@index([clientId])
  @@index([status])
  @@map("invoices")
}

// ============================================
// TASKS & NOTES
// ============================================

model Task {
  id                String   @id @default(cuid())
  title             String
  description       String?
  status            String @default("TODO") // TODO, IN_PROGRESS, COMPLETED, CANCELLED
  priority          String @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  dueDate           DateTime?
  completedAt       DateTime?
  
  caseId            String?
  case              Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  assignedToId      String?
  assignedTo        User?    @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([caseId])
  @@index([assignedToId])
  @@index([dueDate])
  @@map("tasks")
}

model Note {
  id                String   @id @default(cuid())
  content           String
  
  caseId            String?
  case              Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  createdById       String
  createdBy         User     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([caseId])
  @@map("notes")
}

// ============================================
// SECURITY & AUDIT
// ============================================

model AuditLog {
  id                String   @id @default(cuid())
  
  action            String   // e.g., "CREATE", "UPDATE", "DELETE", "VIEW"
  entity            String   // e.g., "Case", "Document", "Client"
  entityId          String
  
  changes           String?  // JSON string of what changed
  ipAddress         String?
  userAgent         String?
  
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  
  @@index([organizationId])
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model ApiKey {
  id                String   @id @default(cuid())
  name              String
  key               String   @unique
  lastUsedAt        DateTime?
  expiresAt         DateTime?
  isActive          Boolean  @default(true)
  
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organizationId])
  @@map("api_keys")
}